@name Duplicator

@inputs 
@outputs 
@persist [E O]:entity [Duplicator]:table [GDuplicator]:gtable



if(changed(0)) {
    runOnFile(1)
    runOnChat(1)
    runOnHTTP(1)
    timer("file", 1)
    timer("print", 1)
    timer("updater", 1)
    
    Duplicator["updater/request/maxTime", number] = 20
    Duplicator["updater/wait/maxTime", number] = 20
    
    E = entity()
    O = owner()
    
    function addPrint(Print:array) {
        Duplicator["print", array] = Duplicator["print", array]:add(array(vec(255)):add(Print))
    }
    function addPrint(Print:string) {
        addPrint(array(Print))
    }
    function addPrint(Color:vector, Print:string) {
        addPrint(array(Color, Print))
    }
    ################
    #
    #
    #
    ################
    function addPrintBlue(Print:array) {
        Print = array(vec(150,150,255)):add(Print:add(array(vec(255))))
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintBlue(Print:string) {
        addPrintBlue(array(Print))
    }
    #
    #
    #
    function addPrintValue(Print:array) {
        Print = array(vec(255,120,120)):add(Print:add(array(vec(255))))
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintValue(Print:string) {
        addPrintValue(array(Print))
    }
    #
    #
    #
    function addPrintRed(Print:array) {
        Print = array(vec(255,60,60)):add(Print:add(array(vec(255))))
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintRed(Print:string) {
        addPrintRed(array(Print))
    }
    #
    #
    #
    function addPrintGreen(Print:array) {
        Print = array(vec(60,255,60)):add(Print:add(array(vec(255))))
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintGreen(Print:string) {
        addPrintGreen(array(Print))
    }
    ################
    #
    #
    #
    ################
    function addPrintDuplicator(Print:array) {
        Print = array(vec(30,255,30),(Duplicator["print", array]:count() ? "\n" : "") + "[Дубликатор] ",vec(255)):add(Print)
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintDuplicator(Print:string) {
        addPrintDuplicator(array(Print))
    }
    #
    #
    #
    function addPrintUpdater(Print:array) {
        addPrintDuplicator("")
        addPrintBlue("[Система обновления] ")
        Duplicator["print", array] = Duplicator["print", array]:add(Print)
    }
    function addPrintUpdater(Print:string) {
        addPrintUpdater(array(Print))
    }
    
    
    #
    #
    #
    GDuplicator = gTable("Duplicator" + O:steamID())
    local Entity = GDuplicator["entity", entity]
    if(Entity == E | !Entity) {
        addPrint(vec(0), "========================================")
        if(GDuplicator["updateUploadCode", number] & Entity) {
            addPrintUpdater("Новая версия кода была запущена ")
            addPrintGreen("успешно ")
            addPrint(", чип готов к работе.")
        }
        else {
            addPrintDuplicator("")
            addPrint("Код был запущен ")
            addPrintGreen("успешно")
            addPrint(", чип готов к работе.")
        }
        GDuplicator["updateUploadCode", number] = 0
        GDuplicator["entity", entity] = E
    }
    else {
        if(Entity:type() == "gmod_wire_expression2") {
            if(Entity:getName():explode("\n")[1, string] == "Duplicator") {
                    printColor(
                        vec( 30,255, 30), "[Дубликатор] ",
                        vec(255, 60, 60), "Обнаружена ошибка! ",
                        vec(255,255,255), "Указана причина: у вас уже существует чип \"Duplicator\".",
                        "\nЭтот чип будет уничтожен, пользуйтесь уже существующим, второй вам ни к чему."                        
                    )
                selfDestruct()
            }
        }
    }
    #
    #
    #
}


if(chatClk(O)) {
    if(changed(0)) {
        function addChatCommand(Command:string, Description:array) {
            Duplicator["commads/" + Command, number] = 1
            Duplicator["commads/" + Command + "/description", array] = Description
            Duplicator["commads/list", array] = Duplicator["commads/list", array]:add(array(Command))
        }
        
        addChatCommand(
            "команды",
            array(
                vec(255,255,255), "Печатает в чат список загруженных команд."
            )
        )
        addChatCommand(
            "проверить обновления",
            array(
                vec(255,255,255), "Отправляет запрос на загрузку страницы с последней оригинальной версией кода. Если страница будет загружена, то вы сможете воспользоваться командой \"",
                vec(150,150,255), "!обновить",
                vec(255,255,255), "\""
            )
        )
        addChatCommand(
            "обновить",
            array(
                vec(255,255,255), "Заменяет код чипа на код, который был загружен с сервера gitHub."
            )
        )
        #[
        #
        #- 
        #
        addChatCommand(
            "выделить",
            array(
                vec(255,255,255), "Определяет позицию выделения."
            )
        )
        addChatCommand(
            "радиус",
            array(
                vec(255,255,255), "Определяет радиус сферического выделения."
            )
        )
        addChatCommand(
            "сканировать",
            array(
                vec(255,255,255), "Сканирует выделенную область."
            )
        )
        addChatCommand(
            "добавить чертеж",
            array(
                vec(255,255,255), "Добавляет чертёж в библиотеку."
            )
        )
        #
        #- 
        #
        addChatCommand(
            "создать библиотеку",
            array(
                vec(255,255,255), "Создаёт новую библиотеку."
            )
        )
        addChatCommand(
            "сохранить",
            array(
                vec(255,255,255), "Сохраняет отсканированное."
            )
        )
        addChatCommand(
            "загрузить",
            array(
                vec(255,255,255), "Загружает сохранённое."
            )
        )
        addChatCommand(
            "прервать",
            array(
                vec(255,255,255), "Прерывает указанную процедуру."
            )
        )
        
        
        function duplicatorPrintCommads() {
            local CommandList = Duplicator["commads/list", array]
            foreach(C, Command:string = CommandList) {
                addPrint(array(
                    vec(255,255,255), C + ". \"",
                    vec(150,150,255), "!" + Command,
                    vec(255,255,255), "\" "
                ):add(Duplicator["commads/" + Command + "/description", array]))
            }
            
            addPrint(array(
                vec(255,255,255), "Список команд(" + CommandList:count() + "): "
            ))
        }
        ]#
    }
    
    local LastSaid = O:lastSaid()
    if(LastSaid:left(1) == "!") {
        hideChat(1)
        
        local Explode = LastSaid:sub(2):explode(" ")
        local Command = Explode[1, string]
        
        switch(Command) {
            #
            #
            #
            case "команды",
                local CommandList = Duplicator["commads/list", array]
                addPrintDuplicator("Список команд(")
                addPrintValue(CommandList:count() + "")
                addPrint("):")
                foreach(C, Command:string = CommandList) {
                    addPrintValue("\n" + C)
                    addPrint(". \"")
                    addPrintBlue("!" + Command)
                    addPrint("\" ")
                    addPrint(Duplicator["commads/" + Command + "/description", array])
                }
            break
            #
            #
            #
            case "проверить",
                local Arg2 = Explode[2, string]
                switch(Arg2) {
                    case "обновления",
                        addPrintUpdater("Начинаю поиск обновлений")
                        Duplicator["updater/procedure", string] = "request"
                    break
                    #
                    #
                    default,
                        addPrintDuplicator("Проверить что?")
                    break
                }
            break
            #
            #
            #
            case "обновить",
                local Update = Duplicator["updater/update", string]
                if(Update) {
                    #ifdef entity:remoteSetCode(string)
                        addPrintUpdater("Код чипа будет заменён на новый, чип будет перезапущен. После перезапуска откройте чип и сохраните новый код.")
                        GDuplicator["updateUploadCode", number] = 1
                        entity():remoteSetCode(Update)
                    #else
                        addPrintUpdater("")
                        addPrintRed("Ошибка обновления! ")
                        addPrint("Указана причина: отсутствует функция ")
                        addPrint(vec(160,160,240), "entity")
                        addPrint(vec(224,224,224), ":")
                        addPrint(vec(160,160,240), "remoteSetCode")
                        addPrint(vec(224,224,224), "(")
                        addPrint(vec(160,160,240), "string")
                        addPrint(vec(224,224,224), ")")
                        addPrintUpdater("Вы можете загрузить файл самостоятельно, перейдя по ссылке ")
                        addPrintValue(Duplicator["updater/url", string])
                    #endif
                }
                else {
                    addPrintUpdater("")
                    addPrintRed("Ошибка обновления! ")
                    addPrint("Указана причина: отсутствует файл обновления")
                }
            break
            #
            #
            #
            default,
                if(Duplicator["commads/" + Command, number]) {
                    addPrintDuplicator("Этой команде нет назначенного действия, возможно, она еще на стадии разработки.")
                }
                else {
                    addPrintDuplicator("Этой команды не сущетствует. Для просмотра спика команд воспользуйтесь командой \"")
                    addPrintBlue("!команды")
                    addPrint("\"")
                }
            break
        }
    }
}

if(clk("updater") | httpClk()) {
    local Procedure = Duplicator["updater/procedure", string]
        timer("updater", Procedure ? 150 : 500)
    
    if(changed(0)) {
        Duplicator["updater/url", string] = "https://raw.githubusercontent.com/AncRad/expression/master/Duplicator"
    }
    
    switch(Procedure) {
        case "request",
            
            if(httpCanRequest()) {
                addPrintUpdater("Запрос на загрузку файла отправлен")
                httpRequest(Duplicator["updater/url", string])
                
                Duplicator["updater/procedure", string] = "wait"
                Duplicator["updater/request/startTime", number] = 0
                break
            }
            if(Duplicator["updater/request/startTime", number]) {
                if((curtime() - Duplicator["updater/request/startTime", number]) >= Duplicator["updater/request/maxTime", number]) {
                    addPrintUpdater("")
                    addPrintRed("Ошибка загрузки!")
                    addPrint("Указана причина: вышло время ожидания разрешения на запрос файла (")
                    addPrintValue(Duplicator["updater/request/maxTime", number] + "с")
                    addPrint(")")
                    addPrintUpdater("Вы можете загрузить файл самостоятельно, перейдя по ссылке ")
                    addPrintValue(Duplicator["updater/url", string])
                    
                    Duplicator["updater/procedure", string] = ""
                    Duplicator["updater/request/startTime", number] = 0
                }
            }
            else {
                addPrintUpdater("Ожидается разрешение на запрос файла")
                Duplicator["updater/request/startTime", number] = curtime()
            }
        break
        #
        #
        #
        case "wait",
            
            if(httpClk()) {
                local Data = httpData()
                
                if(Data) {
                    
                    addPrintUpdater("Файл получен. Ваша версия кода ")
                    Duplicator["updater/data", string] = Data
                    if(getCode() == Data) {
                        #addPrintGreen("не отличается")
                        addPrint(" от последней оригинальной версии кода.")
                    }
                    else {
                        addPrintRed("отличается")
                        addPrint(" от последней оригинальной версии кода. ")
                        addPrint("Вы можете воспользоваться командой \"")
                        addPrintBlue("!обновить")
                        addPrint("\"")
                    }
                    Duplicator["updater/update", string] = Data
                }
                else {
                    addPrintUpdater("")
                    addPrintRed("Ошибка загрузки! ")
                    addPrint("Указана причина: файл пуст")
                    addPrintUpdater("Вы можете загрузить файл самостоятельно, перейдя по ссылке ")
                    addPrintValue(Duplicator["updater/url", string])
                }
                
                Duplicator["updater/procedure", string] = ""
                Duplicator["updater/wait/startTime", number] = 0
                break
            }
            if(Duplicator["updater/wait/startTime", number]) {
                if((curtime() - Duplicator["updater/wait/startTime", number]) >= Duplicator["updater/wait/maxTime", number]) {
                    
                    addPrintUpdater("")
                    addPrintRed("Ошибка загрузки! ")
                    addPrint("Указана причина: превышено время ожидания ответа сервера gitHub (")
                    addPrintValue(Duplicator["updater/wait/maxTime", number] + "с")
                    addPrint(")")
                    addPrintUpdater("Вы можете загрузить файл самостоятельно, перейдя по ссылке ")
                    addPrintValue(Duplicator["updater/url", string])
                    
                    Duplicator["updater/procedure", string] = ""
                    Duplicator["updater/wait/startTime", number] = 0
                }
            }
            else {
                Duplicator["updater/wait/startTime", number] = curtime()
            }
        break
        #
        #
        #
        default,
            
        break
    }
}





if(clk("print")) {
        timer("print", 350)
    
    local Print = Duplicator["print", array]
    if(Print:count()) {
        printColor(Print)
        Duplicator["print", array]:clear()
    }
}
setName("Duplicator\nOPS: " + ops() + "\nCPU: " + floor(cpuUsage() * 1e6))
