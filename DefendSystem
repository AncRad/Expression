В скорем времени здесь появится текст кода.

    Описание кода
Код предназначен для защиты территории - области, в который, играя на впв сервере, вы хотите себя чувтсовать максимально комфорно.
    Функционал:
1. Защита территории - области в пространстве. (Возможно, будет добавлины комбинации фигур пространства, как сферы и кубоиды);
2. Система "Свой-чужой". Список одобренных игроков ("вайт лист"). (Возможно, будет добавлена система репутации "Нейтрал-враждебный");
3. Система самообновлений для максимального удобства загрузки свежей версии кода;
4. EGP SCREEN интерфейс.

    Инструкции:
Появятся позже.

    Код:
@name DefendSistem

@inputs 
@outputs 
@persist [E O]:entity [Q]:table [DefendSistem]:table# [G]:gtable

@trigger none
@model models/bull/gates/processor.mdl
#
#
#
if(changed(0)) {
    ################
    #
    #= INCLUDE
    #
    #include "EGPS"
    #
    ################
    
    
    ################
    #
    #- constant
    #
    E = entity()
    O = owner()
    #
    ################
    
    
    ################
    #
    #- 
    #
    E:setSkin(1)
    #
    runOnFile(1)
    runOnHTTP(1)
    #
    timer("", 1)
    timer("fileSistem", 1)
    timer("httpSistem", 1)
    #
    Q["httpSistem/requestHTTP/maxTime", number] = 20
    Q["httpSistem/waitHTTP/maxTime"   , number] = 20
    Q["fileSistem/requestFile/maxTime", number] = 20
    Q["fileSistem/waitFile/maxTime"   , number] = 20
    Q["fileSistem/writeFile/maxTime"  , number] = 20
    #
    #
    #
    Q["fileSistem/procedure", string] = "requestFile"
    Q["fileSistem/requestFile/fileName", string] = "DefendSistem"
    #
    ################
}
#
#
#
if(clk("")) {
        timer("", 75)
    
    if(changed(0)) {
        function egpAddAct() {}
        function startAct() {
            
        }
        
        
    }
    
    
    local Step = Q["egpSistem/step", number]
    switch(Step) {
        #
        #
        #
        case 0,
            if(egpSelect()) {
                
                Q["egpSistem/step", number] = Step + 1
            }
        break
        #
        #
        #
        case 228, "print(228)" break
        #
        #
        #
        case 1,
            
            
            
            Q["egpSistem/step", number] = Step + 1
        break
        #
        #
        #
        case 2,
            
            
            
            Q["egpSistem/step", number] = Step + 1
        break
        #
        #
        #
        default,
            
            
            foreach(C, Act_i:string = Q["actList", array]) {
                local Act_n = Q[Act_i + "/act/name", string]
                switch(Act_n) {
                    case "d",
                        
                    break
                    default,
                        
                    break
                }
            }
        break
    }
}
#
#
#
if(clk("fileSistem") | fileClk()) {
        timer("fileSistem", 200)
    
    local Procedure = Q["fileSistem/procedure", string]
    switch(Procedure) {
        #
        #
        #
        case "requestFile",
            if(fileCanLoad()) {
                
                fileLoad(Q["fileSistem/requestFile/fileName", string])
                Q["fileSistem/procedure", string] = "waitFile"
                Q["fileSistem/requestFile/startTime", number] = 0
                break
            }
            
            local StartTime = Q["fileSistem/requestFile/startTime", number]
            if(!Q["fileSistem/requestFile/startTime", number]) {
                Q["fileSistem/requestFile/startTime", number] = curtime()
            }
            elseif((StartTime - curtime()) > Q["fileSistem/requestFile/maxTime", number]) {
                
                Q["fileSistem/procedure", string] = ""
                Q["fileSistem/requestFile/startTime", number] = 0
            }
        break
        #
        #
        #
        case "writeFile",
            if(fileCanWrite()) {
                
                fileWrite(Q["fileSistem/writeFile/fileName", string], Q["fileSistem/writeFile/fileName", string])
                
                Q["fileSistem/procedure", string] = ""
                Q["fileSistem/writeFile/startTime", number] = 0
                break
            }
            
            local StartTime = Q["fileSistem/writeFile/startTime", number]
            if(!Q["fileSistem/writeFile/startTime", number]) {
                Q["fileSistem/writeFile/startTime", number] = curtime()
            }
            elseif((StartTime - curtime()) > Q["fileSistem/writeFile/maxTime", number]) {
                
                Q["fileSistem/procedure", string] = ""
                Q["fileSistem/writeFile/startTime", number] = 0
            }
        break
        #
        #
        #
        case "waitFile",
            if(fileClk()) {
                
                local File_t = fileRead()
                if(File_t) {
                    DefendSistem:clear()
                    DefendSistem = vonDecodeTable(File_t)
                    local Error = vonError()
                    if(Error) {
                        print(Error)
                    }
                    
                    Q["fileSistem/file_t", string] = File_t
                    Q["fileSistem/file_n", string] = Q["fileSistem/writeFile/fileName", string]
                }
                else {
                    print("Создаю файл")
                    DefendSistem:clear()
                    DefendSistem = table("DefendSistem_owner/SID" = O:steamID(), "DefendSistem_owner/name" = O:name(), "players" = array())
                }
                
                Q["fileSistem/procedure", string] = ""
                Q["fileSistem/waitFile/startTime", number] = 0
                break
            }
            
            local StartTime = Q["fileSistem/waitFile/startTime", number]
            if(!Q["fileSistem/waitFile/startTime", number]) {
                Q["fileSistem/waitFile/startTime", number] = curtime()
            }
            elseif((StartTime - curtime()) > Q["fileSistem/waitFile/maxTime", number]) {
                
                Q["fileSistem/procedure", string] = ""
                Q["fileSistem/waitFile/startTime", number] = 0
            }
        break
        #
        #
        #
        default,
            
        break
    }
}
#
#
#
if(clk("httpSistem") | httpClk()) {
        timer("httpSistem", 200)
    
    local Procedure = Q["httpSistem/procedure", string]
    switch(Procedure) {
        #
        #
        #
        case "requestHttp",
            if(httpCanRequest()) {
                
                httpRequest("")
                Q["httpSistem/procedure", string] = "waitHttp"
                Q["httpSistem/requestHttp/startTime", number] = 0
                break
            }
            
            local StartTime = Q["httpSistem/requestHttp/startTime", number]
            if(!Q["httpSistem/requestHttp/startTime", number]) {
                Q["httpSistem/requestHttp/startTime", number] = curtime()
            }
            elseif((StartTime - curtime()) > Q["httpSistem/requestHttp/maxTime", number]) {
                
                Q["httpSistem/procedure", string] = ""
                Q["httpSistem/requestHttp/startTime", number] = 0
            }
        break
        #
        #
        #
        case "waitHttp",
            if(httpClk()) {
                
                local Data = httpData()
                if(Data) {
                    local Explode = Data:explode("    Код:\n")
                    local Info = Explode[1, string]
                    local Code = Explode[2, string]
                    
                    if(Code) {
                        if(Code == getCode()) {
                            if(!Q["egpSistem/step", number]) {
                                print("Ваша версия кода не отличается от оригинала.")
                            }
                        }
                        else {
                            if(!Q["egpSistem/step", number]) {
                                print("Ваша версия кода отличается от оригинала.")
                            }
                        }
                    }
                    else {
                        if(!Q["egpSistem/step", number]) {
                            print("Код пуст")
                        }
                    }
                }
                else {
                    
                }
                Q["httpSistem/procedure", string] = ""
                Q["httpSistem/waitHttp/startTime", number] = 0
                break
            }
            
            local StartTime = Q["httpSistem/waitHttp/startTime", number]
            if(!Q["httpSistem/waitHttp/startTime", number]) {
                Q["httpSistem/waitHttp/startTime", number] = curtime()
            }
            elseif((StartTime - curtime()) > Q["httpSistem/waitHttp/maxTime", number]) {
                
                Q["httpSistem/procedure", string] = ""
                Q["httpSistem/waitHttp/startTime", number] = 0
            }
        break
        #
        #
        #
        default,
            
        break
    }
}































